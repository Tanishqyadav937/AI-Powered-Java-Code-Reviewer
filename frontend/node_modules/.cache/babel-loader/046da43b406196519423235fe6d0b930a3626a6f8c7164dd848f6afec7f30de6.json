{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\nclass CodeReviewService {\n  static async reviewCode(code, aiProvider, fileName = '') {\n    try {\n      const response = await axios.post(`${API_BASE_URL}/reviews/review`, {\n        code,\n        aiProvider,\n        fileName\n      });\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error reviewing code:', error);\n      throw new Error(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.errorMessage) || 'Failed to review code');\n    }\n  }\n  static async getAllReviews() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/reviews`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching reviews:', error);\n      throw new Error('Failed to fetch reviews');\n    }\n  }\n  static async getReviewById(id) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/reviews/${id}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching review:', error);\n      throw new Error('Failed to fetch review');\n    }\n  }\n  static async getRecentReviews() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/reviews/recent`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching recent reviews:', error);\n      return [];\n    }\n  }\n  static async getReviewsByProvider(provider) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/reviews/provider/${provider}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching reviews by provider:', error);\n      throw new Error('Failed to fetch reviews by provider');\n    }\n  }\n  static async searchReviews(keyword) {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/reviews/search?keyword=${encodeURIComponent(keyword)}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error searching reviews:', error);\n      throw new Error('Failed to search reviews');\n    }\n  }\n  static async deleteReview(id) {\n    try {\n      await axios.delete(`${API_BASE_URL}/reviews/${id}`);\n    } catch (error) {\n      console.error('Error deleting review:', error);\n      throw new Error('Failed to delete review');\n    }\n  }\n  static async getAvailableProviders() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/reviews/providers`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching providers:', error);\n      return ['OpenAI GPT-4', 'Hugging Face Code Llama', 'Anthropic Claude'];\n    }\n  }\n  static async getStatistics() {\n    try {\n      const response = await axios.get(`${API_BASE_URL}/reviews/stats`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching statistics:', error);\n      throw new Error('Failed to fetch statistics');\n    }\n  }\n}\nexport { CodeReviewService };","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","CodeReviewService","reviewCode","code","aiProvider","fileName","response","post","data","error","_error$response","_error$response$data","console","Error","errorMessage","getAllReviews","get","getReviewById","id","getRecentReviews","getReviewsByProvider","provider","searchReviews","keyword","encodeURIComponent","deleteReview","delete","getAvailableProviders","getStatistics"],"sources":["C:/Users/TANISHQ/OneDrive/Desktop/java.project/frontend/src/services/CodeReviewService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api';\r\n\r\nclass CodeReviewService {\r\n  static async reviewCode(code, aiProvider, fileName = '') {\r\n    try {\r\n      const response = await axios.post(`${API_BASE_URL}/reviews/review`, {\r\n        code,\r\n        aiProvider,\r\n        fileName\r\n      });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error reviewing code:', error);\r\n      throw new Error(error.response?.data?.errorMessage || 'Failed to review code');\r\n    }\r\n  }\r\n\r\n  static async getAllReviews() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/reviews`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching reviews:', error);\r\n      throw new Error('Failed to fetch reviews');\r\n    }\r\n  }\r\n\r\n  static async getReviewById(id) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/reviews/${id}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching review:', error);\r\n      throw new Error('Failed to fetch review');\r\n    }\r\n  }\r\n\r\n  static async getRecentReviews() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/reviews/recent`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching recent reviews:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  static async getReviewsByProvider(provider) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/reviews/provider/${provider}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching reviews by provider:', error);\r\n      throw new Error('Failed to fetch reviews by provider');\r\n    }\r\n  }\r\n\r\n  static async searchReviews(keyword) {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/reviews/search?keyword=${encodeURIComponent(keyword)}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error searching reviews:', error);\r\n      throw new Error('Failed to search reviews');\r\n    }\r\n  }\r\n\r\n  static async deleteReview(id) {\r\n    try {\r\n      await axios.delete(`${API_BASE_URL}/reviews/${id}`);\r\n    } catch (error) {\r\n      console.error('Error deleting review:', error);\r\n      throw new Error('Failed to delete review');\r\n    }\r\n  }\r\n\r\n  static async getAvailableProviders() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/reviews/providers`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching providers:', error);\r\n      return ['OpenAI GPT-4', 'Hugging Face Code Llama', 'Anthropic Claude'];\r\n    }\r\n  }\r\n\r\n  static async getStatistics() {\r\n    try {\r\n      const response = await axios.get(`${API_BASE_URL}/reviews/stats`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching statistics:', error);\r\n      throw new Error('Failed to fetch statistics');\r\n    }\r\n  }\r\n}\r\n\r\nexport { CodeReviewService };\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}